name: Nightly Patch Release

on:
  schedule:
    # Run nightly at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  nightly-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for version comparison
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine toml

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes since last release
        id: check-changes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, proceeding with release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Check if there are commits since the last tag
            COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
            if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
              echo "Found $COMMITS_SINCE_TAG commits since last tag $LATEST_TAG"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No commits since last tag $LATEST_TAG"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Increment patch version
        if: steps.check-changes.outputs.has_changes == 'true'
        id: version-bump
        run: |
          python << 'EOF'
          import toml
          import re
          
          # Read current version from pyproject.toml
          with open('pyproject.toml', 'r') as f:
              config = toml.load(f)
          
          current_version = config['project']['version']
          print(f"Current version: {current_version}")
          
          # Parse version and increment patch
          version_parts = current_version.split('.')
          if len(version_parts) != 3:
              raise ValueError(f"Invalid version format: {current_version}")
          
          major, minor, patch = version_parts
          new_patch = int(patch) + 1
          new_version = f"{major}.{minor}.{new_patch}"
          
          print(f"New version: {new_version}")
          
          # Update version in pyproject.toml
          config['project']['version'] = new_version
          
          with open('pyproject.toml', 'w') as f:
              toml.dump(config, f)
          
          # Update version in __init__.py
          with open('adt_core/__init__.py', 'r') as f:
              init_content = f.read()
          
          # Replace __version__ line
          init_content = re.sub(
              r'__version__ = "[^"]*"',
              f'__version__ = "{new_version}"',
              init_content
          )
          
          with open('adt_core/__init__.py', 'w') as f:
              f.write(init_content)
          
          # Write new version to GitHub output
          with open('$GITHUB_OUTPUT', 'a') as f:
              f.write(f"new_version={new_version}\n")
          EOF

      - name: Commit version bump
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git add pyproject.toml adt_core/__init__.py
          git commit -m "Bump version to ${{ steps.version-bump.outputs.new_version }} for nightly release"

      - name: Build package
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # Clean build artifacts to prevent packaging obsolete files
          rm -rf dist/ build/ *.egg-info/
          python -m build

      - name: Create and push tag
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git tag -a "v${{ steps.version-bump.outputs.new_version }}" -m "Nightly release v${{ steps.version-bump.outputs.new_version }}"
          git push origin "v${{ steps.version-bump.outputs.new_version }}"

      - name: Push version bump commit
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git push origin main

      - name: Publish to PyPI
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

      - name: Create GitHub release
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get commits since last tag for release notes
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            RELEASE_NOTES="Initial nightly release"
          else
            RELEASE_NOTES=$(git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20)
          fi
          
          # Create release using GitHub CLI
          gh release create "v${{ steps.version-bump.outputs.new_version }}" \
            --title "Nightly Release v${{ steps.version-bump.outputs.new_version }}" \
            --notes "$RELEASE_NOTES" \
            --prerelease

      - name: Log skipped release
        if: steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "Skipping nightly release - no changes since last release"